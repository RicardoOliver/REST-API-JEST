# 🚀 API REST com Autenticação JWT, Testes com Jest, Docker

Este projeto é uma API REST simples construída com **Express.js**, que possui autenticação via **JWT**, testes automatizados com **Jest + Supertest**, e suporte a **Docker** para execução em containers.

---

## 📁 Estrutura do Projeto

```
.
├── app.js                # Código principal da API Express
├── server.js             # Inicializa o servidor
├── auth.test.js          # Testes de autenticação com Jest e Supertest
├── Dockerfile            # Imagem do container
├── docker-compose.yml    # Orquestração Docker
├── package.json
└── README.md             # Este arquivo
```

---

## 🔧 Tecnologias Utilizadas

- Node.js
- Express.js
- JWT (`jsonwebtoken`)
- Jest
- Supertest
- Docker + Docker Compose

---

## ✅ Pré-requisitos

- [Node.js](https://nodejs.org/)
- [Docker](https://www.docker.com/)
- [Docker Compose](https://docs.docker.com/compose/)

---

## 🛠️ Instalação e Configuração

### 1. Clonar o projeto

```bash
git clone https://github.com/RicardoOliver/REST-API-JEST.git
cd REST-API-JEST
```

### 2. Instalar dependências

```bash
npm install
```

### 3. Rodar a API localmente

```bash
node server.js
```

A API estará disponível em `http://localhost:9000`.

---

## 🧪 Rodando os testes com Jest

```bash
npm test
```

Os testes estão localizados em `auth.test.js`.

---

## 🐳 Usando Docker

### 1. Build da imagem

```bash
docker build -t api_rest_jest .
```

### 2. Rodar com Docker Compose

```bash
docker-compose up
```

A API será acessível em `http://localhost:9000`.

> ⚠️ Se estiver usando o Portainer ou outra aplicação na porta 9000, altere a porta no `docker-compose.yml` para evitar conflito.

---

## 🔐 Autenticação JWT

### Rota de Login

```http
POST /login
Content-Type: application/json

{
  "username": "admin",
  "password": "1234"
}
```

Resposta:
```json
{
  "token": "seu-token-jwt"
}
```

### Rota protegida

```http
GET /dashboard
Authorization: Bearer <token>
```

---

## 🧪 Exemplo de Teste com Jest + Supertest (`auth.test.js`)

```js
const request = require('supertest');
const app = require('./app');

describe('Autenticação', () => {
  it('deve retornar um token válido com credenciais corretas', async () => {
    const res = await request(app)
      .post('/login')
      .send({ username: 'admin', password: '1234' });

    expect(res.statusCode).toEqual(200);
    expect(res.body).toHaveProperty('token');
  });

  it('deve negar acesso com token inválido', async () => {
    const res = await request(app)
      .get('/dashboard')
      .set('Authorization', 'Bearer token_invalido');

    expect(res.statusCode).toEqual(401);
  });
});
```

---

## 🐞 Problemas comuns

- **Erro 403 no push com GitHub:** Use um **Personal Access Token** em vez da senha. Veja [essa explicação](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).

- **Conflito com porta 9000:** Altere a porta no `docker-compose.yml` se já estiver em uso.

---

## 📜 Licença

Este projeto está sob a licença MIT.